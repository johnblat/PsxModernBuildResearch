$PSDocId: Document Release 1.0 for Run-time Library Release 4.4$
歪まないテクスチャーマッピング用関数

                       Copyright(C) 1997 Sony Computer Entertainment Inc.
                                                     All rights reserved.



＜サンプルの解説＞
draw_general_square	四角形に歪まないテクスチャーマッピングを行なう

    形式	draw_general_square(Vertex,ot,s,divn,txs0,txs1)
		SVECTOR Vertex[4];	/*４頂点の３次元座標*/
		u_long *ot;		/*ＯＴのヘッダー*/
		POLY_FT4 *s;		/*パケット領域のヘッダー*/
		int divn;		/*１分割のライン数*/
		int txs0;		/*テクスチャの大きさ（Ｕ方向）*/
		int txs1;		/*テクスチャの大きさ（Ｖ方向）*/

    解説	Vertex[4]の示す四角形に、プリセットされたテクスチャを
		テクスチャマッピングする。４頂点がどのような位置にあって
		もテクスチャは歪まない。
		１回の実行で複数の四角形パケットが生成されるがすべてが
		ＯＴのおなじ場所にリンクされる。
		パッケト領域は画面サイズのＶ方向の２倍をdivnで割った数
		用意すれば十分である。
		divnを増やすと歪みが大きくなる。
		テクスチャのサイズはtxs0,txs1によって変えられる。

		<引数フォーマット>
		Vertex[i] : (1,15,0)
		
		<注意>
		Vertexの大きさによって定数を調整する必要がある。
						-> ソースプログラム参照

    返り値 	なし


draw_ground_square	四角形に歪まないテクスチャーマッピングを行なう

    形式	draw_ground_square(Vertex,ot,s,txs0,txs1)
		SVECTOR Vertex[4];	/*４頂点の３次元座標*/
		u_long *ot;		/*ＯＴのヘッダー*/
		POLY_FT3 *s;		/*パケット領域のヘッダー*/
		int txs0;		/*テクスチャの大きさ（Ｕ方向）*/
		int txs1;		/*テクスチャの大きさ（Ｖ方向）*/

    解説	Vertex[4]の示す四角形に、プリセットされたテクスチャを
		テクスチャマッピングする。４頂点がＸＺ平面（Ｙ軸に垂直な
		平面）をＹ軸Ｘ軸の順に回転した位置にある場合
		はテクスチャが歪まない。（バンクのない道路など）
		１回の実行で複数の三角形パケットが生成されるがすべてが
		ＯＴのおなじ場所にリンクされる。
		パケットはスキャンラインごとに１個生成される。
		パッケト領域は画面サイズのＶ方向数用意すれば十分である。
		テクスチャのサイズはtxs0,txs1によって変えられる。

		<引数フォーマット>
		Vertex[i] : (1,15,0)
		
		<注意>
		Vertexの大きさによって定数を調整する必要がある。
						-> ソースプログラム参照

    返り値 	なし


draw_ground_square2	四角形に歪まないテクスチャーマッピングを行なう

    形式	draw_ground_square2(Vertex,ot,s,divn,txs0,txs1)
		SVECTOR Vertex[4];	/*４頂点の３次元座標*/
		u_long *ot;		/*ＯＴのヘッダー*/
		POLY_FT4 *s;		/*パケット領域のヘッダー*/
		int divn;		/*１分割のライン数*/
		int txs0;		/*テクスチャの大きさ（Ｕ方向）*/
		int txs1;		/*テクスチャの大きさ（Ｖ方向）*/

    解説	Vertex[4]の示す四角形に、プリセットされたテクスチャを
		テクスチャマッピングする。４頂点がＸＺ平面（Ｙ軸に垂直な
		平面）をＹ軸Ｘ軸の順に回転した位置にある場合
		はテクスチャが歪まない。（バンクのない道路など）
		１回の実行で複数の四角形パケットが生成されるがすべてが
		ＯＴのおなじ場所にリンクされる。
		パケットはスキャンライン*divnごとに１個生成される。
		パッケト領域は画面サイズのＶ方向数をdivnで割った数だけ
		用意すれば十分である。
		divnを増やすと歪みが大きくなる。(divn>=2)
		テクスチャのサイズはtxs0,txs1によって変えられる。

		<引数フォーマット>
		Vertex[i] : (1,15,0)
		
		<注意>
		Vertexの大きさによって定数を調整する必要がある。
						-> ソースプログラム参照

    返り値 	なし

＜起動方法＞
        >psymake    	コンパイル
        >psymake load   必要なデータをダウンロード
        >run main       実行


＜コントローラの操作方法＞
        ○：Ｙ軸まわりの回転
        △：Ｘ軸まわりの回転
        □：Ｙ軸まわりの回転
        ×：Ｘ軸まわりの回転
        →：Ｘ軸方向の移動
        ←：Ｘ軸方向の移動
        ↑：Ｙ軸方向の移動
        ↓：Ｙ軸方向の移動
        L1：Ｚ軸方向の移動
        L2：Ｚ軸まわりの回転
        R1：Ｚ軸方向の移動
        R2：Ｚ軸まわりの回転
        START&L2：ライン分割数デクリメント（新アルゴリズムの場合）
        START&R2：ライン分割数インクリメント（新アルゴリズムの場合）
        START&L2：ポリゴン分割数デクリメント（旧アルゴリズムの場合）
        START&R2：ポリゴン分割数インクリメント（旧アルゴリズムの場合）
	START&L1：モード選択
	START&R1：モード選択
	L1&L2：テクスチャアドレス変更
	L1&R2：テクスチャアドレス変更
	R1&R2：テクスチャアドレス変更
	R1&L2：テクスチャアドレス変更
        SELECT：終了



＜備考＞

	text.c main.c の#define INTERLACEをコメントアウトすると
	ノンインターレースモードになります。
	
	インターレースモードでは四角形の状態と分割数によって６０フレーム／秒
	を表示できない場合があります。

	draw_genral_squareだけ法線クリップを行ないますが、水平にちかい
	視点からみると正しくない場合があります。
	四角形の形も水平にちかい視点からみると正しくない場合があります。
	これは計算誤差によるものです。

	４つの頂点のうち最初の３つを使ってテクスチャアドレスが計算されます。
	したがって平行四辺形の一部になります。

	用意すべきパケット領域は分割数と画面の解像度できまります。

	テクスチャアドレス、CLUT、テクスチャページはプリセット
	してください。

	draw_ground_squareのほうがdraw_ground_square2よりほとんどの
	場合速く描画できます。

