$PSDocId: Document Release 1.0 for Run-time Library Release 4.4$
thread:スレッドを使用したサンプルプログラム

                      Copyright(C) 1997 Sony Computer Entertainment Inc.
                                                    All Rights Reserved.

＜サンプルの解説＞

	このサンプルは、sample\graphics\balls をベースに、

	「演算が終了して描画命令を発行したあと、次の VSync 割り込みが
	  来るまで、別の作業を行う方法を thread を用いて実現した」

	サンプルです。

	変更点は、

	#ifdef THREAD_SAMPLE
	(#else)
	#endif

	で囲まれています。
	main.c で、THREAD_SAMPLE を定義してコンパイルすると、画面には
	処理時間（時間）のかわりに、sub thread で作業した時間（空き時
	間=Vsync が来るまでに何回ループできたか）が表示されます。表示
	するボールの数を増すと、メインループの処理時間が増え、それにと
	もなって「空き時間」が減っていくのがわかります。
	SUB_STACK で sub thread が使用する、スタックポインタを定義して
	いますので、このアドレスを使用するときは適当に変更してください。

	sub thread まわりの制御は次のようになります。

	１・演算が終了して描画命令を発行したあと、ChangeTh() で制御を
	    sub thread（関数は sub_func()) へ移します。そのとき、sub
	    thread は、前回 Vsync割り込みよって制御を取られた場所から
	    始まります。
	２・Vsync割り込みが来るまで、ループでカウンタをインクリメント
	    します。
	３・Vsync割り込みがくると、VsyncCallback で設定した関数(cbvsync)
	    が実行されます。この関数を抜けるときに、制御を戻す thread
	    を main thread になるように設定します。
	４・割り込み処理から抜けると、１の ChangeTh() の次から処理が始
	    まります。

	図にすると以下のようになります。


           main thread           *    sub thread
       ***************************************************
                                 *
        main()                   *
        {                        *
            初期化・前処理       *
                |                *
          -> (MAIN LOOP)         *                       
          |     |                *    sub_func()
          | 演算・描画処理       *    {
          |     |                *    +----------------+ 
          | ChangeTh() -------------->| Counter Up Loop|
          |     | <-----------------  |(以前の処理から)|
          | 表示バッファ切り替え * |  +-----/----------+
          |     |                * |  }    /
          |------                * |      /Vsync 割り込み
                |                * |     / 
            後処理               * |   cbvsync()
                |                * |   {   
            return(0)            * |     FntPrint(....)
        }                        * |     戻りthreadの変更
                                 * |---}

	ChangeTh() を使用した場合と関数呼出しで同様なことをやらせた場
	合の利点／欠点を比較すると、次のようになります。

	・利点・
	ChangeTh() を使用すれば、割り込みで中断した場所から再開できる
	ので、プログラムが書きやすい。関数呼出しで同じ処理をした場合、
	割り込み終了後の関数からの脱出処理（通常は割り込み処理でフラグ
	をたててループの先頭でそれをチェック）、次に関数呼出しがあると
	また関数の先頭からはじまるので再開処理（前回中断した場所への戻
	りや途中結果の記録＆制御）、といったことのためプログラムが複雑
	になります。

	・欠点・
	ChangeTh() を使用した場合、コンテクストの切り替えが起こります。
	これは、関数呼出しに比べて多少重い処理になります（ほとんどは待
	避するレジスタの数の差ですが）。また、sub thread のために、main
	とは別にスタックを用意し、かつ再開するためにはそのエリアを壊さ
	ないで確保しておかねばなりません。main の スタックにそのまま積
	んでいくだけの関数呼出しに比べると、メモリの管理が必要となりま
	す。

	・その他・
	同じ関数が複数の thread で同時に実行される可能性がある場合、そ
	のコードは再入可能（re-entrant）である必要がありすが、PlayStation
	のライブラリ関数のいくつかはそのように作成されていませんので注
	意してください。

＜起動方法＞ 
	>psymake	コンパイル
	>run balls	実行

＜コントローラの操作方法＞
        ↑	：ボールの数の増加
        ↓	：ボールの数の減少
        L1	：ポーズ
        SELECT	：終了

＜備考＞
